// <auto-generated />
using System;
using HotelManagement.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace HotelManagement.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250830065921_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("HotelManagement.Core.Entities.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("BasePrice")
                        .HasColumnType("numeric");

                    b.Property<int>("BookingStatusId")
                        .HasColumnType("integer");

                    b.Property<int>("BookingTypeId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CancelledAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CheckInDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CheckOutDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("integer");

                    b.Property<int>("GuestId")
                        .HasColumnType("integer");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<int>("RoomId")
                        .HasColumnType("integer");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BookingStatusId");

                    b.HasIndex("BookingTypeId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("GuestId");

                    b.HasIndex("RoomId");

                    b.ToTable("Bookings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BasePrice = 42500m,
                            BookingStatusId = 1,
                            BookingTypeId = 1,
                            CheckInDate = new DateTime(2025, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            CheckOutDate = new DateTime(2025, 8, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedAt = new DateTime(2025, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            EmployeeId = 1,
                            GuestId = 1,
                            Notes = "",
                            RoomId = 3,
                            TotalPrice = 42500m
                        },
                        new
                        {
                            Id = 2,
                            BasePrice = 68000m,
                            BookingStatusId = 1,
                            BookingTypeId = 1,
                            CheckInDate = new DateTime(2025, 8, 17, 0, 0, 0, 0, DateTimeKind.Utc),
                            CheckOutDate = new DateTime(2025, 8, 25, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedAt = new DateTime(2025, 8, 16, 0, 0, 0, 0, DateTimeKind.Utc),
                            EmployeeId = 1,
                            GuestId = 2,
                            Notes = "",
                            RoomId = 3,
                            TotalPrice = 68000m,
                            UpdatedAt = new DateTime(2025, 8, 17, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 3,
                            BasePrice = 7000m,
                            BookingStatusId = 1,
                            BookingTypeId = 2,
                            CheckInDate = new DateTime(2025, 8, 13, 0, 0, 0, 0, DateTimeKind.Utc),
                            CheckOutDate = new DateTime(2025, 8, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedAt = new DateTime(2025, 8, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            EmployeeId = 2,
                            GuestId = 3,
                            Notes = "Командировка",
                            RoomId = 1,
                            TotalPrice = 7000m,
                            UpdatedAt = new DateTime(2025, 8, 14, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 4,
                            BasePrice = 22000m,
                            BookingStatusId = 1,
                            BookingTypeId = 2,
                            CheckInDate = new DateTime(2025, 8, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            CheckOutDate = new DateTime(2025, 8, 18, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedAt = new DateTime(2025, 8, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            EmployeeId = 2,
                            GuestId = 4,
                            Notes = "Семейный отдых",
                            RoomId = 2,
                            TotalPrice = 22000m,
                            UpdatedAt = new DateTime(2025, 8, 14, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 5,
                            BasePrice = 25000m,
                            BookingStatusId = 1,
                            BookingTypeId = 1,
                            CheckInDate = new DateTime(2025, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            CheckOutDate = new DateTime(2025, 8, 20, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedAt = new DateTime(2025, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            EmployeeId = 1,
                            GuestId = 5,
                            Notes = "",
                            RoomId = 5,
                            TotalPrice = 25000m,
                            UpdatedAt = new DateTime(2025, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 6,
                            BasePrice = 39000m,
                            BookingStatusId = 3,
                            BookingTypeId = 3,
                            CancelledAt = new DateTime(2025, 8, 20, 0, 0, 0, 0, DateTimeKind.Utc),
                            CheckInDate = new DateTime(2025, 8, 22, 0, 0, 0, 0, DateTimeKind.Utc),
                            CheckOutDate = new DateTime(2025, 8, 28, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedAt = new DateTime(2025, 8, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            EmployeeId = 1,
                            GuestId = 3,
                            Notes = "Отмена по семейным обстоятельствам",
                            RoomId = 4,
                            TotalPrice = 39000m,
                            UpdatedAt = new DateTime(2025, 8, 13, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("HotelManagement.Core.Entities.BookingStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("BookingStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Подтверждено",
                            Name = "Confirmed"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Завершено",
                            Name = "Completed"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Отменено",
                            Name = "Cancelled"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Ожидает подтверждения",
                            Name = "Pending"
                        });
                });

            modelBuilder.Entity("HotelManagement.Core.Entities.BookingType", b =>
                {
                    b.Property<int>("BookingTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BookingTypeId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("BookingTypeId");

                    b.ToTable("BookingTypes");

                    b.HasData(
                        new
                        {
                            BookingTypeId = 1,
                            Description = "Веб-сайт",
                            Name = "Online"
                        },
                        new
                        {
                            BookingTypeId = 2,
                            Description = "Телефон",
                            Name = "Phone"
                        },
                        new
                        {
                            BookingTypeId = 3,
                            Description = "Ресепшн",
                            Name = "Reception"
                        });
                });

            modelBuilder.Entity("HotelManagement.Core.Entities.Citizenship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Citizenships");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "RU",
                            Description = "Гражданство Российской Федерации",
                            IsActive = true,
                            Name = "Российская Федерация"
                        },
                        new
                        {
                            Id = 2,
                            Code = "US",
                            Description = "Гражданство США",
                            IsActive = true,
                            Name = "Соединенные Штаты Америки"
                        },
                        new
                        {
                            Id = 3,
                            Code = "DE",
                            Description = "Гражданство Германии",
                            IsActive = true,
                            Name = "Германия"
                        },
                        new
                        {
                            Id = 4,
                            Code = "FR",
                            Description = "Гражданство Франции",
                            IsActive = true,
                            Name = "Франция"
                        },
                        new
                        {
                            Id = 5,
                            Code = "CN",
                            Description = "Гражданство Китая",
                            IsActive = true,
                            Name = "Китай"
                        },
                        new
                        {
                            Id = 6,
                            Code = "GB",
                            Description = "Гражданство Великобритании",
                            IsActive = true,
                            Name = "Великобритания"
                        },
                        new
                        {
                            Id = 7,
                            Code = "JP",
                            Description = "Гражданство Японии",
                            IsActive = true,
                            Name = "Япония"
                        },
                        new
                        {
                            Id = 8,
                            Code = "CA",
                            Description = "Гражданство Канады",
                            IsActive = true,
                            Name = "Канада"
                        },
                        new
                        {
                            Id = 9,
                            Code = "AU",
                            Description = "Гражданство Австралии",
                            IsActive = true,
                            Name = "Австралия"
                        },
                        new
                        {
                            Id = 10,
                            Code = "BR",
                            Description = "Гражданство Бразилии",
                            IsActive = true,
                            Name = "Бразилия"
                        });
                });

            modelBuilder.Entity("HotelManagement.Core.Entities.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Административный отдел",
                            Name = "Администрация"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Отдел обслуживания гостей",
                            Name = "Обслуживание"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Отдел уборки и хозяйства",
                            Name = "Хозяйственный"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Служба безопасности",
                            Name = "Безопасность"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Отдел инженерного и технического обслуживания",
                            Name = "Инженерно-технический"
                        });
                });

            modelBuilder.Entity("HotelManagement.Core.Entities.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("EmployeeId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("EmergencyContactName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("EmergencyContactPhone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("EmployeeStatusId")
                        .HasColumnType("integer");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(10, 2)");

                    b.HasKey("EmployeeId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("EmployeeStatusId");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            EmployeeId = 1,
                            Address = "ул. Рабочая, д. 5, кв. 20",
                            DepartmentId = 1,
                            Email = "elena.admin@hotel.com",
                            EmergencyContactName = "Петр Иванов",
                            EmergencyContactPhone = "+7-900-111-22-33",
                            EmployeeStatusId = 1,
                            FirstName = "Елена",
                            HireDate = new DateTime(2022, 1, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            LastName = "Иванова",
                            MiddleName = "Александровна",
                            Phone = "+7-800-555-01-01",
                            Position = "Администратор",
                            Salary = 45000m
                        },
                        new
                        {
                            EmployeeId = 2,
                            Address = "ул. Толстого, д. 120, кв. 54",
                            DepartmentId = 1,
                            Email = "olesya.admin@hotel.com",
                            EmergencyContactName = "Сергей Николаев",
                            EmergencyContactPhone = "+7-925-687-33-57",
                            EmployeeStatusId = 1,
                            FirstName = "Олеся",
                            HireDate = new DateTime(2024, 5, 20, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            LastName = "Николаева",
                            MiddleName = "Викторовна",
                            Phone = "+7-925-687-33-56",
                            Position = "Администратор",
                            Salary = 40000m
                        },
                        new
                        {
                            EmployeeId = 3,
                            Address = "ул. Трудовая, д. 12, кв. 7",
                            DepartmentId = 3,
                            Email = "sergey.cleaner@hotel.com",
                            EmergencyContactName = "Мария Петрова",
                            EmergencyContactPhone = "+7-900-222-33-44",
                            EmployeeStatusId = 1,
                            FirstName = "Надежда",
                            HireDate = new DateTime(2022, 3, 20, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            LastName = "Петрова",
                            MiddleName = "Сергеевна",
                            Phone = "+7-800-555-02-02",
                            Position = "Уборщик",
                            Salary = 35000m
                        },
                        new
                        {
                            EmployeeId = 4,
                            Address = "пр. Мира, д. 8, кв. 15",
                            DepartmentId = 5,
                            Email = "alexey.tech@hotel.com",
                            EmergencyContactName = "Ольга Попова",
                            EmergencyContactPhone = "+7-900-333-44-55",
                            EmployeeStatusId = 1,
                            FirstName = "Алексей",
                            HireDate = new DateTime(2021, 11, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            LastName = "Попов",
                            MiddleName = "Михайлович",
                            Phone = "+7-800-555-03-03",
                            Position = "Техник",
                            Salary = 50000m
                        });
                });

            modelBuilder.Entity("HotelManagement.Core.Entities.EmployeeStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("EmployeeStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Сотрудник активно работает",
                            Name = "Активный"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Сотрудник находится в отпуске",
                            Name = "В отпуске"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Сотрудник уволен",
                            Name = "Уволен"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Сотрудник на больничном",
                            Name = "На больничном"
                        });
                });

            modelBuilder.Entity("HotelManagement.Core.Entities.Guest", b =>
                {
                    b.Property<int>("GuestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("GuestId"));

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("CitizenshipId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("IdentificationIssuedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("IdentificationIssuedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("IdentificationNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("IdentificationTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("RegistrationDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("GuestId");

                    b.HasIndex("CitizenshipId");

                    b.HasIndex("IdentificationTypeId");

                    b.ToTable("Guests");

                    b.HasData(
                        new
                        {
                            GuestId = 1,
                            Address = "г. Новокузнецк, ул. Ленина, д. 10, кв. 5",
                            CitizenshipId = 1,
                            CreatedAt = new DateTime(2025, 6, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateOfBirth = new DateTime(1985, 3, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "ivan.petrov@email.com",
                            FirstName = "Иван",
                            IdentificationIssuedBy = "ОУФМС России по г. Москве",
                            IdentificationIssuedDate = new DateTime(2010, 5, 20, 0, 0, 0, 0, DateTimeKind.Utc),
                            IdentificationNumber = "4510123456",
                            IdentificationTypeId = 1,
                            LastName = "Петров",
                            MiddleName = "Сергеевич",
                            Notes = "VIP клиент",
                            Phone = "+7-900-123-45-67",
                            PostalCode = "101000",
                            RegistrationDate = new DateTime(2023, 6, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            GuestId = 2,
                            Address = "г. Санкт-Петербург, пр. Невский, д. 25, кв. 12",
                            CitizenshipId = 1,
                            CreatedAt = new DateTime(2025, 8, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateOfBirth = new DateTime(1990, 8, 22, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "anna.smirnova@email.com",
                            FirstName = "Анна",
                            IdentificationIssuedBy = "ОУФМС России по СПб",
                            IdentificationIssuedDate = new DateTime(2015, 9, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            IdentificationNumber = "4012345678",
                            IdentificationTypeId = 1,
                            LastName = "Смирнова",
                            MiddleName = "Владимировна",
                            Notes = "Постоянный клиент",
                            Phone = "+7-911-234-56-78",
                            PostalCode = "191025",
                            RegistrationDate = new DateTime(2015, 8, 15, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            GuestId = 3,
                            Address = "г. Барнаул, просп. Ленина, д. 48, кв. 12",
                            CitizenshipId = 1,
                            CreatedAt = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateOfBirth = new DateTime(1978, 12, 5, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "mikhail.kozlov@email.com",
                            FirstName = "Михаил",
                            IdentificationIssuedBy = "ТП УФМС России по Алтайскому краю в г. Барнаул",
                            IdentificationIssuedDate = new DateTime(2020, 10, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            IdentificationNumber = "2220123456",
                            IdentificationTypeId = 1,
                            LastName = "Козлов",
                            MiddleName = "Александрович",
                            Notes = "",
                            Phone = "+7-922-345-67-89",
                            PostalCode = "620014",
                            RegistrationDate = new DateTime(2008, 10, 3, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            GuestId = 4,
                            Address = "г. Новосибирск, ул. Гагарина, д. 15, кв. 8",
                            CitizenshipId = 1,
                            CreatedAt = new DateTime(2025, 8, 3, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateOfBirth = new DateTime(1999, 8, 6, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "semen.kuznetsov@email.com",
                            FirstName = "Семен",
                            IdentificationIssuedBy = "ОУФМС России по Свердловской обл.",
                            IdentificationIssuedDate = new DateTime(2008, 3, 18, 0, 0, 0, 0, DateTimeKind.Utc),
                            IdentificationNumber = "6603456789",
                            IdentificationTypeId = 1,
                            LastName = "Кузнецов",
                            MiddleName = "Васильевич",
                            Notes = "Деловые поездки",
                            Phone = "+7-925-687-33-56",
                            PostalCode = "543217",
                            RegistrationDate = new DateTime(2008, 10, 3, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            GuestId = 5,
                            Address = "г. Пенза, ул. Пушкина, д. 10, кв. 5",
                            CitizenshipId = 1,
                            CreatedAt = new DateTime(2025, 8, 8, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateOfBirth = new DateTime(1987, 7, 6, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "svetlana.sergeevna@email.com",
                            FirstName = "Васильева",
                            IdentificationIssuedBy = "ОУФМС России по Волгоградской обл.",
                            IdentificationIssuedDate = new DateTime(2019, 4, 23, 0, 0, 0, 0, DateTimeKind.Utc),
                            IdentificationNumber = "5566876543",
                            IdentificationTypeId = 1,
                            LastName = "Сергеевна",
                            MiddleName = "Светлана",
                            Notes = "",
                            Phone = "+7-925-687-33-56",
                            PostalCode = "987345",
                            RegistrationDate = new DateTime(2022, 10, 3, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("HotelManagement.Core.Entities.IdentificationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("IdentificationTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Основной документ, удостоверяющий личность гражданина Российской Федерации.",
                            Name = "Паспорт гражданина РФ"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Документ, удостоверяющий личность гражданина РФ за пределами страны.",
                            Name = "Заграничный паспорт"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Документ, подтверждающий право на управление транспортными средствами.",
                            Name = "Водительское удостоверение"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Документ, удостоверяющий личность военнослужащего или призывника.",
                            Name = "Военный билет"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Документ, подтверждающий факт рождения и личность ребенка.",
                            Name = "Свидетельство о рождении"
                        });
                });

            modelBuilder.Entity("HotelManagement.Core.Entities.PaymentStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("PaymentStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Платеж ожидает обработки",
                            Name = "Ожидает оплаты"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Платеж частично выполнен",
                            Name = "Частично оплачено"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Платеж полностью выполнен",
                            Name = "Оплачено"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Платеж просрочен",
                            Name = "Просрочено"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Платеж отменен",
                            Name = "Отменено"
                        });
                });

            modelBuilder.Entity("HotelManagement.Core.Entities.Room", b =>
                {
                    b.Property<int>("RoomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RoomId"));

                    b.Property<int>("Capacity")
                        .HasColumnType("integer");

                    b.Property<int>("Floor")
                        .HasColumnType("integer");

                    b.Property<bool>("HasAirConditioning")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasBalcony")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasMinibar")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("HasTV")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("HasWifi")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<bool>("IsAvailable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<decimal>("PricePerNight")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("RoomNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<int>("RoomTypeId")
                        .HasColumnType("integer");

                    b.HasKey("RoomId");

                    b.HasIndex("RoomTypeId");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            RoomId = 1,
                            Capacity = 2,
                            Floor = 1,
                            HasAirConditioning = true,
                            HasBalcony = false,
                            HasMinibar = false,
                            HasTV = true,
                            HasWifi = true,
                            ImageUrl = "/uploads/images/room101.jpg",
                            IsAvailable = true,
                            PricePerNight = 3500m,
                            RoomNumber = "101",
                            RoomTypeId = 1
                        },
                        new
                        {
                            RoomId = 2,
                            Capacity = 3,
                            Floor = 2,
                            HasAirConditioning = true,
                            HasBalcony = true,
                            HasMinibar = false,
                            HasTV = true,
                            HasWifi = true,
                            ImageUrl = "/uploads/images/room201.jpg",
                            IsAvailable = true,
                            PricePerNight = 5500m,
                            RoomNumber = "201",
                            RoomTypeId = 2
                        },
                        new
                        {
                            RoomId = 3,
                            Capacity = 4,
                            Floor = 3,
                            HasAirConditioning = true,
                            HasBalcony = true,
                            HasMinibar = true,
                            HasTV = true,
                            HasWifi = true,
                            ImageUrl = "/uploads/images/room301.jpg",
                            IsAvailable = true,
                            PricePerNight = 8500m,
                            RoomNumber = "301",
                            RoomTypeId = 3
                        },
                        new
                        {
                            RoomId = 4,
                            Capacity = 5,
                            Floor = 3,
                            HasAirConditioning = true,
                            HasBalcony = false,
                            HasMinibar = true,
                            HasTV = true,
                            HasWifi = true,
                            ImageUrl = "",
                            IsAvailable = true,
                            PricePerNight = 6500m,
                            RoomNumber = "302",
                            RoomTypeId = 4
                        },
                        new
                        {
                            RoomId = 5,
                            Capacity = 2,
                            Floor = 2,
                            HasAirConditioning = true,
                            HasBalcony = false,
                            HasMinibar = false,
                            HasTV = true,
                            HasWifi = false,
                            ImageUrl = "",
                            IsAvailable = true,
                            PricePerNight = 2500m,
                            RoomNumber = "202",
                            RoomTypeId = 5
                        });
                });

            modelBuilder.Entity("HotelManagement.Core.Entities.RoomType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("RoomTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Уютный номер с одной или двумя кроватями, подходит для кратковременного проживания.",
                            Name = "Стандартный номер"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Просторный номер с улучшенной отделкой, мини-баром и видом на горы.",
                            Name = "Делюкс номер"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Роскошный номер с гостиной зоной, роскошным видом и премиальным сервисом.",
                            Name = "Люкс"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Большой номер с двумя смежными комнатами, рассчитанный на размещение семьи.",
                            Name = "Семейный номер"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Небольшой бюджетный номер с минимальным набором удобств.",
                            Name = "Эконом номер"
                        });
                });

            modelBuilder.Entity("HotelManagement.Core.Entities.Service", b =>
                {
                    b.Property<int>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ServiceId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DurationMinutes")
                        .HasColumnType("integer");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10, 2)");

                    b.HasKey("ServiceId");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            ServiceId = 1,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Завтрак с доставкой в номер",
                            DurationMinutes = 60,
                            ImageUrl = "/uploads/images/breakfast.jpg",
                            IsActive = true,
                            Name = "Завтрак",
                            Price = 500m
                        },
                        new
                        {
                            ServiceId = 2,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Охраняемое парковочное место на территории отеля",
                            DurationMinutes = 1440,
                            ImageUrl = "/uploads/images/parking.jpg",
                            IsActive = true,
                            Name = "Парковка",
                            Price = 1000m
                        },
                        new
                        {
                            ServiceId = 3,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Высокоскоростной интернет",
                            DurationMinutes = 1440,
                            ImageUrl = "/uploads/images/wifi.jpg",
                            IsActive = true,
                            Name = "Wi-Fi Premium",
                            Price = 300m
                        },
                        new
                        {
                            ServiceId = 4,
                            CreatedAt = new DateTime(2024, 1, 4, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Расслабляющий массаж и спа-процедуры",
                            DurationMinutes = 90,
                            ImageUrl = "",
                            IsActive = true,
                            Name = "Спа-процедуры",
                            Price = 1500m
                        },
                        new
                        {
                            ServiceId = 5,
                            CreatedAt = new DateTime(2024, 1, 5, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Комфортабельный трансфер до аэропорта и обратно",
                            DurationMinutes = 120,
                            ImageUrl = "",
                            IsActive = true,
                            Name = "Трансфер из аэропорта",
                            Price = 800m
                        });
                });

            modelBuilder.Entity("HotelManagement.Core.Entities.ServiceSale", b =>
                {
                    b.Property<int>("ServiceSaleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ServiceSaleId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("integer");

                    b.Property<int?>("GuestId")
                        .HasColumnType("integer");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("PaymentStatusId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<DateTime>("SaleDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ServiceId")
                        .HasColumnType("integer");

                    b.Property<int?>("StayId")
                        .HasColumnType("integer");

                    b.Property<decimal>("TaxPercent")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(10, 2)");

                    b.HasKey("ServiceSaleId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("GuestId");

                    b.HasIndex("PaymentStatusId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("StayId");

                    b.ToTable("ServiceSales");

                    b.HasData(
                        new
                        {
                            ServiceSaleId = 1,
                            CreatedAt = new DateTime(2025, 8, 6, 8, 0, 0, 0, DateTimeKind.Utc),
                            EmployeeId = 1,
                            GuestId = 1,
                            Notes = "",
                            PaymentStatusId = 3,
                            Quantity = 2,
                            SaleDate = new DateTime(2025, 8, 6, 8, 0, 0, 0, DateTimeKind.Utc),
                            ServiceId = 1,
                            StayId = 1,
                            TaxPercent = 20m,
                            TotalPrice = 1000m,
                            UnitPrice = 500m
                        },
                        new
                        {
                            ServiceSaleId = 2,
                            CreatedAt = new DateTime(2025, 8, 13, 10, 0, 0, 0, DateTimeKind.Utc),
                            EmployeeId = 2,
                            GuestId = 2,
                            Notes = "",
                            PaymentStatusId = 3,
                            Quantity = 1,
                            SaleDate = new DateTime(2025, 8, 13, 10, 0, 0, 0, DateTimeKind.Utc),
                            ServiceId = 2,
                            StayId = 2,
                            TaxPercent = 20m,
                            TotalPrice = 1000m,
                            UnitPrice = 1000m
                        },
                        new
                        {
                            ServiceSaleId = 3,
                            CreatedAt = new DateTime(2025, 8, 21, 16, 30, 0, 0, DateTimeKind.Utc),
                            EmployeeId = 1,
                            GuestId = 3,
                            Notes = "",
                            PaymentStatusId = 1,
                            Quantity = 1,
                            SaleDate = new DateTime(2025, 8, 21, 16, 30, 0, 0, DateTimeKind.Utc),
                            ServiceId = 3,
                            StayId = 3,
                            TaxPercent = 20m,
                            TotalPrice = 300m,
                            UnitPrice = 300m
                        },
                        new
                        {
                            ServiceSaleId = 4,
                            CreatedAt = new DateTime(2025, 8, 26, 9, 0, 0, 0, DateTimeKind.Utc),
                            EmployeeId = 1,
                            GuestId = 1,
                            Notes = "",
                            PaymentStatusId = 3,
                            Quantity = 3,
                            SaleDate = new DateTime(2025, 8, 26, 9, 0, 0, 0, DateTimeKind.Utc),
                            ServiceId = 1,
                            StayId = 4,
                            TaxPercent = 20m,
                            TotalPrice = 1500m,
                            UnitPrice = 500m
                        },
                        new
                        {
                            ServiceSaleId = 5,
                            CreatedAt = new DateTime(2025, 8, 31, 11, 0, 0, 0, DateTimeKind.Utc),
                            EmployeeId = 2,
                            GuestId = 2,
                            Notes = "",
                            PaymentStatusId = 1,
                            Quantity = 1,
                            SaleDate = new DateTime(2025, 8, 31, 11, 0, 0, 0, DateTimeKind.Utc),
                            ServiceId = 4,
                            StayId = 5,
                            TaxPercent = 20m,
                            TotalPrice = 1500m,
                            UnitPrice = 1500m
                        });
                });

            modelBuilder.Entity("HotelManagement.Core.Entities.Stay", b =>
                {
                    b.Property<int>("StayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("StayId"));

                    b.Property<DateTime>("ActualCheckInDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ActualCheckOutDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("BookingId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("integer");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<decimal>("PaidAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(10, 2)")
                        .HasDefaultValue(0m);

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PaymentStatusId")
                        .HasColumnType("integer");

                    b.Property<decimal>("TaxPercent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(10, 2)")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("TotalAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(10, 2)")
                        .HasDefaultValue(0m);

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("StayId");

                    b.HasIndex("BookingId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("PaymentStatusId");

                    b.ToTable("Stays");

                    b.HasData(
                        new
                        {
                            StayId = 1,
                            ActualCheckInDate = new DateTime(2025, 8, 9, 14, 0, 0, 0, DateTimeKind.Utc),
                            ActualCheckOutDate = new DateTime(2025, 8, 15, 12, 0, 0, 0, DateTimeKind.Utc),
                            BookingId = 1,
                            CreatedAt = new DateTime(2025, 8, 9, 14, 0, 0, 0, DateTimeKind.Utc),
                            DueDate = new DateTime(2025, 8, 9, 0, 0, 0, 0, DateTimeKind.Utc),
                            EmployeeId = 1,
                            Notes = "Раннее заселение",
                            PaidAmount = 51000m,
                            PaymentDate = new DateTime(2025, 8, 9, 10, 0, 0, 0, DateTimeKind.Utc),
                            PaymentStatusId = 3,
                            TaxPercent = 20m,
                            TotalAmount = 51000m,
                            UpdatedAt = new DateTime(2025, 8, 16, 12, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            StayId = 2,
                            ActualCheckInDate = new DateTime(2025, 8, 17, 15, 0, 0, 0, DateTimeKind.Utc),
                            ActualCheckOutDate = new DateTime(2025, 8, 25, 11, 0, 0, 0, DateTimeKind.Utc),
                            BookingId = 2,
                            CreatedAt = new DateTime(2025, 8, 12, 15, 0, 0, 0, DateTimeKind.Utc),
                            DueDate = new DateTime(2025, 8, 17, 0, 0, 0, 0, DateTimeKind.Utc),
                            EmployeeId = 1,
                            Notes = "Деловая поездка",
                            PaidAmount = 68000m,
                            PaymentDate = new DateTime(2025, 8, 18, 9, 0, 0, 0, DateTimeKind.Utc),
                            PaymentStatusId = 3,
                            TaxPercent = 20m,
                            TotalAmount = 68000m,
                            UpdatedAt = new DateTime(2025, 8, 26, 11, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            StayId = 3,
                            ActualCheckInDate = new DateTime(2025, 8, 13, 16, 0, 0, 0, DateTimeKind.Utc),
                            ActualCheckOutDate = new DateTime(2025, 8, 15, 16, 0, 0, 0, DateTimeKind.Utc),
                            BookingId = 3,
                            CreatedAt = new DateTime(2025, 8, 20, 13, 0, 0, 0, DateTimeKind.Utc),
                            DueDate = new DateTime(2025, 8, 13, 0, 0, 0, 0, DateTimeKind.Utc),
                            EmployeeId = 2,
                            Notes = "",
                            PaidAmount = 7000m,
                            PaymentDate = new DateTime(2025, 8, 13, 0, 0, 0, 0, DateTimeKind.Utc),
                            PaymentStatusId = 3,
                            TaxPercent = 20m,
                            TotalAmount = 7000m
                        },
                        new
                        {
                            StayId = 4,
                            ActualCheckInDate = new DateTime(2025, 8, 14, 14, 30, 0, 0, DateTimeKind.Utc),
                            ActualCheckOutDate = new DateTime(2025, 8, 18, 10, 0, 0, 0, DateTimeKind.Utc),
                            BookingId = 4,
                            CreatedAt = new DateTime(2025, 8, 13, 14, 30, 0, 0, DateTimeKind.Utc),
                            DueDate = new DateTime(2025, 8, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            EmployeeId = 1,
                            Notes = "Семейный отдых",
                            PaidAmount = 21000m,
                            PaymentDate = new DateTime(2025, 8, 16, 18, 0, 0, 0, DateTimeKind.Utc),
                            PaymentStatusId = 2,
                            TaxPercent = 20m,
                            TotalAmount = 22000m,
                            UpdatedAt = new DateTime(2025, 8, 20, 10, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            StayId = 5,
                            ActualCheckInDate = new DateTime(2025, 8, 10, 13, 0, 0, 0, DateTimeKind.Utc),
                            ActualCheckOutDate = new DateTime(2025, 8, 20, 13, 0, 0, 0, DateTimeKind.Utc),
                            BookingId = 5,
                            CreatedAt = new DateTime(2025, 8, 10, 13, 0, 0, 0, DateTimeKind.Utc),
                            DueDate = new DateTime(2025, 8, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            EmployeeId = 2,
                            Notes = "",
                            PaidAmount = 25000m,
                            PaymentDate = new DateTime(2025, 8, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            PaymentStatusId = 3,
                            TaxPercent = 20m,
                            TotalAmount = 25000m
                        });
                });

            modelBuilder.Entity("HotelManagement.Core.Entities.StayGuest", b =>
                {
                    b.Property<int>("StayGuestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("StayGuestId"));

                    b.Property<DateTime?>("CheckInDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("CheckOutDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("GuestId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsMainGuest")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("StayId")
                        .HasColumnType("integer");

                    b.HasKey("StayGuestId");

                    b.HasIndex("GuestId");

                    b.HasIndex("StayId", "GuestId")
                        .IsUnique();

                    b.ToTable("StayGuests");

                    b.HasData(
                        new
                        {
                            StayGuestId = 1,
                            CheckInDate = new DateTime(2025, 8, 9, 14, 0, 0, 0, DateTimeKind.Utc),
                            CheckOutDate = new DateTime(2025, 8, 15, 12, 0, 0, 0, DateTimeKind.Utc),
                            GuestId = 1,
                            IsMainGuest = true,
                            Notes = "",
                            StayId = 1
                        },
                        new
                        {
                            StayGuestId = 2,
                            CheckInDate = new DateTime(2025, 8, 17, 15, 0, 0, 0, DateTimeKind.Utc),
                            CheckOutDate = new DateTime(2025, 8, 25, 11, 0, 0, 0, DateTimeKind.Utc),
                            GuestId = 2,
                            IsMainGuest = true,
                            Notes = "",
                            StayId = 2
                        },
                        new
                        {
                            StayGuestId = 3,
                            CheckInDate = new DateTime(2025, 8, 13, 16, 0, 0, 0, DateTimeKind.Utc),
                            CheckOutDate = new DateTime(2025, 8, 15, 16, 0, 0, 0, DateTimeKind.Utc),
                            GuestId = 3,
                            IsMainGuest = true,
                            Notes = "",
                            StayId = 3
                        },
                        new
                        {
                            StayGuestId = 4,
                            CheckInDate = new DateTime(2025, 8, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            CheckOutDate = new DateTime(2025, 8, 18, 0, 0, 0, 0, DateTimeKind.Utc),
                            GuestId = 4,
                            IsMainGuest = true,
                            Notes = "",
                            StayId = 4
                        },
                        new
                        {
                            StayGuestId = 5,
                            CheckInDate = new DateTime(2025, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            CheckOutDate = new DateTime(2025, 8, 20, 0, 0, 0, 0, DateTimeKind.Utc),
                            GuestId = 5,
                            IsMainGuest = true,
                            Notes = "",
                            StayId = 5
                        },
                        new
                        {
                            StayGuestId = 6,
                            CheckInDate = new DateTime(2025, 8, 9, 0, 0, 0, 0, DateTimeKind.Utc),
                            CheckOutDate = new DateTime(2025, 8, 13, 0, 0, 0, 0, DateTimeKind.Utc),
                            GuestId = 2,
                            IsMainGuest = false,
                            Notes = "",
                            StayId = 1
                        });
                });

            modelBuilder.Entity("HotelManagement.Core.Entities.Booking", b =>
                {
                    b.HasOne("HotelManagement.Core.Entities.BookingStatus", "BookingStatus")
                        .WithMany("Bookings")
                        .HasForeignKey("BookingStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HotelManagement.Core.Entities.BookingType", "BookingType")
                        .WithMany("Bookings")
                        .HasForeignKey("BookingTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HotelManagement.Core.Entities.Employee", "Employee")
                        .WithMany("Bookings")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("HotelManagement.Core.Entities.Guest", "Guest")
                        .WithMany("Bookings")
                        .HasForeignKey("GuestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HotelManagement.Core.Entities.Room", "Room")
                        .WithMany("Bookings")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BookingStatus");

                    b.Navigation("BookingType");

                    b.Navigation("Employee");

                    b.Navigation("Guest");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("HotelManagement.Core.Entities.Employee", b =>
                {
                    b.HasOne("HotelManagement.Core.Entities.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HotelManagement.Core.Entities.EmployeeStatus", "EmployeeStatus")
                        .WithMany("Employees")
                        .HasForeignKey("EmployeeStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("EmployeeStatus");
                });

            modelBuilder.Entity("HotelManagement.Core.Entities.Guest", b =>
                {
                    b.HasOne("HotelManagement.Core.Entities.Citizenship", "Citizenship")
                        .WithMany("Guests")
                        .HasForeignKey("CitizenshipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HotelManagement.Core.Entities.IdentificationType", "IdentificationType")
                        .WithMany("Guests")
                        .HasForeignKey("IdentificationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Citizenship");

                    b.Navigation("IdentificationType");
                });

            modelBuilder.Entity("HotelManagement.Core.Entities.Room", b =>
                {
                    b.HasOne("HotelManagement.Core.Entities.RoomType", "RoomType")
                        .WithMany("Rooms")
                        .HasForeignKey("RoomTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RoomType");
                });

            modelBuilder.Entity("HotelManagement.Core.Entities.ServiceSale", b =>
                {
                    b.HasOne("HotelManagement.Core.Entities.Employee", "Employee")
                        .WithMany("ServiceSales")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HotelManagement.Core.Entities.Guest", "Guest")
                        .WithMany("ServiceSales")
                        .HasForeignKey("GuestId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("HotelManagement.Core.Entities.PaymentStatus", "PaymentStatus")
                        .WithMany("ServiceSales")
                        .HasForeignKey("PaymentStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HotelManagement.Core.Entities.Service", "Service")
                        .WithMany("ServiceSales")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HotelManagement.Core.Entities.Stay", "Stay")
                        .WithMany()
                        .HasForeignKey("StayId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Employee");

                    b.Navigation("Guest");

                    b.Navigation("PaymentStatus");

                    b.Navigation("Service");

                    b.Navigation("Stay");
                });

            modelBuilder.Entity("HotelManagement.Core.Entities.Stay", b =>
                {
                    b.HasOne("HotelManagement.Core.Entities.Booking", "Booking")
                        .WithMany("Stays")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HotelManagement.Core.Entities.Employee", "Employee")
                        .WithMany("Stays")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HotelManagement.Core.Entities.PaymentStatus", "PaymentStatus")
                        .WithMany("Stays")
                        .HasForeignKey("PaymentStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("Employee");

                    b.Navigation("PaymentStatus");
                });

            modelBuilder.Entity("HotelManagement.Core.Entities.StayGuest", b =>
                {
                    b.HasOne("HotelManagement.Core.Entities.Guest", "Guest")
                        .WithMany("StayGuests")
                        .HasForeignKey("GuestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HotelManagement.Core.Entities.Stay", "Stay")
                        .WithMany("StayGuests")
                        .HasForeignKey("StayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guest");

                    b.Navigation("Stay");
                });

            modelBuilder.Entity("HotelManagement.Core.Entities.Booking", b =>
                {
                    b.Navigation("Stays");
                });

            modelBuilder.Entity("HotelManagement.Core.Entities.BookingStatus", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("HotelManagement.Core.Entities.BookingType", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("HotelManagement.Core.Entities.Citizenship", b =>
                {
                    b.Navigation("Guests");
                });

            modelBuilder.Entity("HotelManagement.Core.Entities.Department", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("HotelManagement.Core.Entities.Employee", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("ServiceSales");

                    b.Navigation("Stays");
                });

            modelBuilder.Entity("HotelManagement.Core.Entities.EmployeeStatus", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("HotelManagement.Core.Entities.Guest", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("ServiceSales");

                    b.Navigation("StayGuests");
                });

            modelBuilder.Entity("HotelManagement.Core.Entities.IdentificationType", b =>
                {
                    b.Navigation("Guests");
                });

            modelBuilder.Entity("HotelManagement.Core.Entities.PaymentStatus", b =>
                {
                    b.Navigation("ServiceSales");

                    b.Navigation("Stays");
                });

            modelBuilder.Entity("HotelManagement.Core.Entities.Room", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("HotelManagement.Core.Entities.RoomType", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("HotelManagement.Core.Entities.Service", b =>
                {
                    b.Navigation("ServiceSales");
                });

            modelBuilder.Entity("HotelManagement.Core.Entities.Stay", b =>
                {
                    b.Navigation("StayGuests");
                });
#pragma warning restore 612, 618
        }
    }
}
